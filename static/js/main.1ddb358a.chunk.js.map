{"version":3,"sources":["Components/Portal.js","index.js"],"names":["Portal","this","renderPortal","props","ReactDOM","unmountComponentAtNode","defaultNode","node","document","body","removeChild","createElement","appendChild","children","type","React","cloneElement","render","Component","ColoredRect","position","index","x","y","width","height","fill","shadowBlur","draggable","onDragMove","propsValue","setPosition","map","item","Zindex","currentTarget","attrs","name","style","top","left","placeholder","ArrowComponent","positionStart","y1","x1","positionEnd","y2","x2","widthAndHeight","points","pointerLength","pointerWidth","stroke","strokeWidth","groupEl","useRef","layerEl","arrowGroupEl","stageEl","useState","positionShape","setPositionShape","haveIntersection","r1","shape","current","getIntersection","console","log","window","innerWidth","innerHeight","ref","e","targetRect","target","getClientRect","pos","getPointerPosition","forEach","group","key","getElementById"],"mappings":"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","file":"static/js/main.1ddb358a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class Portal extends React.Component {\n  componentDidMount() {\n    this.renderPortal();\n  }\n\n  componentDidUpdate(props) {\n    this.renderPortal();\n  }\n\n  componentWillUnmount() {\n    ReactDOM.unmountComponentAtNode(this.defaultNode || this.props.node);\n    if (this.defaultNode) {\n      document.body.removeChild(this.defaultNode);\n    }\n    this.defaultNode = null;\n  }\n\n  renderPortal(props) {\n    if (!this.props.node && !this.defaultNode) {\n      this.defaultNode = document.createElement('div');\n      document.body.appendChild(this.defaultNode);\n    }\n\n    let children = this.props.children;\n    // https://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b\n    if (typeof children.type === 'function') {\n      children = React.cloneElement(children);\n    }\n\n    ReactDOM.render(children, this.props.node || this.defaultNode);\n  }\n\n  render() {\n    return null;\n  }\n}\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { render } from 'react-dom';\r\nimport Portal from './Components/Portal';\r\nimport { Stage, Layer, Rect, Group, Arrow, Tag, Text, Label } from 'react-konva';\r\n\r\n\r\nfunction ColoredRect(props) {\r\n    let position = props.position;\r\n    let index = props.index;\r\n    let handleDrag = (propsValue) => {\r\n        props.setPosition(\r\n            position.map((item, Zindex) => {\r\n                if (index === Zindex) return [propsValue.currentTarget.attrs.y, propsValue.currentTarget.attrs.x];\r\n                return item;\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Group>\r\n            <Rect\r\n                // name=\"rectange-name\"\r\n                x={position[index][1]}\r\n                y={position[index][0]}\r\n                width={100}\r\n                height={100}\r\n                fill='green'\r\n                shadowBlur={5}\r\n                draggable\r\n                onDragMove={handleDrag}\r\n                name='fillShape'\r\n            />\r\n            {/* <Label\r\n            x={position[index][1]}\r\n            y={position[index][0]}\r\n            opacity={0.75}\r\n        >\r\n            <Tag\r\n                fill='black'\r\n                pointerDirection='down'\r\n                pointerWidth={10}\r\n                pointerHeight={10}\r\n                lineJoin='round'\r\n                shadowColor='black'\r\n                shadowBlur={10}\r\n                shadowOffset={10}\r\n                shadowOpacity={0.5}\r\n            >\r\n                <Text\r\n                    text={'x = ' + position[index][1] + ', y = ' + position[index][0]}\r\n                    fontFamily='Calibri'\r\n                    fontSize={18}\r\n                    padding={5}\r\n                    fill='white'\r\n                />\r\n            </Tag>\r\n        // <Group>\r\n\r\n            {/* інпут прибра для кращої візуалізації */}\r\n            <Portal>\r\n                <div>\r\n                    <input style={{\r\n                        position: 'absolute',\r\n                        top: position[index][0] + 50,\r\n                        left: position[index][1] + 6,\r\n                        width: '100px'\r\n                    }}\r\n                        type='text' placeholder={'x = ' + position[index][1] + ', y = ' + position[index][0]}></input>\r\n                </div>\r\n            </Portal>\r\n        </Group>\r\n    );\r\n\r\n}\r\nfunction ArrowComponent(props) {\r\n    let [y1, x1] = props.positionStart, [y2, x2] = props.positionEnd;\r\n    // let handleMove = (e) => {\r\n    let widthAndHeight = props.widthAndHeight;\r\n    // }\r\n    return (\r\n        <Arrow\r\n            points={[x1 + 50, y1 + 120, x2 - 20, y2 + 50]}\r\n            pointerLength={10}\r\n            pointerWidth={10}\r\n            fill='black'\r\n            stroke='black'\r\n            strokeWidth={4}\r\n        // onDragMove={handleMove}\r\n        />\r\n    )\r\n}\r\nfunction Shape(props) {\r\n    const groupEl = useRef(null);\r\n    const layerEl = useRef(null);\r\n    const arrowGroupEl = useRef(null);\r\n    const stageEl = useRef(null);\r\n    const [positionShape, setPositionShape] = useState([[100, 100], [300, 300], [100, 500]]);\r\n    let handDragMoveLayer = (e) => {\r\n        let target = e.target;\r\n        let targetRect = target.getClientRect();\r\n        let pos = stageEl.current.getPointerPosition();\r\n        let shape = layerEl.current.getIntersection(pos);\r\n       if( shape !== null) console.log(targetRect.x, targetRect.y);\r\n        // let arrow = arrowGroupEl.current.children[0];\r\n        groupEl.current.children.forEach(function (group) {\r\n            if (haveIntersection(group.children[0].getClientRect()) /*targetRect)*/) {\r\n                group.children[0].fill('red');\r\n            } else {\r\n                group.children[0].fill('green');\r\n            }\r\n        });\r\n    }\r\n    let haveIntersection = (r1) => {\r\n        let shape = layerEl.current.getIntersection({x: r1.x, y: r1.y});\r\n        if(shape !== null) console.log(shape);\r\n    }\r\n\r\n    return (\r\n        <Stage \r\n        width={window.innerWidth} \r\n        height={window.innerHeight} \r\n        ref={stageEl}\r\n        >\r\n            <Layer\r\n                ref={layerEl}\r\n                onDragMove={handDragMoveLayer}\r\n            >\r\n                <Group ref={groupEl} >\r\n                    {positionShape.map((item, index) => {\r\n                        return <ColoredRect key={index} position={positionShape} index={index} setPosition={setPositionShape} />\r\n                    })}\r\n                </Group>\r\n                <Group ref={arrowGroupEl}>\r\n                    <ArrowComponent positionStart={positionShape[0]} positionEnd={positionShape[1]} />\r\n                    {/* <ArrowComponent positionStart={positionRect2} positionEnd={positionRect3} /> */}\r\n                </Group>\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n}\r\n\r\nrender(<Shape />, document.getElementById('root'));"],"sourceRoot":""}